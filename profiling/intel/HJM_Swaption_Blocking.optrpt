Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: HJM_Swaption_Blocking(double *, double, double, double, double, double, int, int, double, double *, double **, long, long, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at HJM_Swaption_Blocking.cpp(126,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(126,3)
      remark #15389: vectorization support: reference pdSwapPayoffs has unaligned access   [ HJM_Swaption_Blocking.cpp(127,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 1.810 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(126,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at HJM_Swaption_Blocking.cpp(128,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between pdSwapPayoffs line 131 and pdSwapPayoffs line 133
   remark #15346: vector dependence: assumed OUTPUT dependence between pdSwapPayoffs line 133 and pdSwapPayoffs line 131
LOOP END

LOOP BEGIN at HJM_Swaption_Blocking.cpp(158,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(159,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(159,2)
      remark #15388: vectorization support: reference pdDiscountingRatePath has aligned access   [ HJM_Swaption_Blocking.cpp(160,4) ]
      remark #15388: vectorization support: reference ppdHJMPath has aligned access   [ HJM_Swaption_Blocking.cpp(160,4) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 7.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 7.310 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(159,2)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(159,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at HJM_Swaption_Blocking.cpp(169,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(170,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(170,2)
      remark #15388: vectorization support: reference pdSwapRatePath has aligned access   [ HJM_Swaption_Blocking.cpp(171,4) ]
      remark #15389: vectorization support: reference ppdHJMPath has unaligned access   [ HJM_Swaption_Blocking.cpp(171,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 2.000 
      remark #15478: estimated potential speedup: 6.590 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(170,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at HJM_Swaption_Blocking.cpp(184,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at HJM_Swaption_Blocking.cpp(184,2)
   remark #15388: vectorization support: reference pdSwapPayoffs has aligned access   [ HJM_Swaption_Blocking.cpp(185,4) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.725
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15460: masked strided loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 13 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 2.490 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at HJM_Swaption_Blocking.cpp(184,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference pdSwapPayoffs has aligned access   [ HJM_Swaption_Blocking.cpp(185,4) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.417
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at HJM_Swaption_Blocking.cpp(184,2)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at HJM_Swaption_Blocking.cpp(150,3)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

   LOOP BEGIN at HJM_Swaption_Blocking.cpp(182,7)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ HJM_Swaption_Blocking.cpp(187,20) ]
   LOOP END
LOOP END
===========================================================================
